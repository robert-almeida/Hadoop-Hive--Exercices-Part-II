#Acesso ao Beeline
beeline -u jdbc:hive2://quickstart:10000/default -n admin -d org.apache.hive.jdbc.HiveDriver

#Criação da base de dados
create database tw_db;
use tw_db;
SELECT current_database ();

#Criação de tabelas
create table tweets (json string);

load data local inpath '/home/cloudera/Documents/tw.json' into table tweets;

CREATE TABLE 
  tweet_text as
  SELECT 
    v1.text, v2.location, trim(split(v2.location,",")[1]) as state, v2.name,v2.followers,v2.screen_name, v1.id, v1.created_at, v1.retweet_count from tweets tw
  LATERAL VIEW 
    json_tuple(tw.json, 'text','created_at','retweet_count','user','id_str') v1 as text, created_at, retweet_count, user,id
  LATERAL VIEW 
    json_tuple(v1.user, 'location','name','followers_count','screen_name') v2 as location,name, followers, screen_name;
    
#Verificando o schema da tabela
DESCRIBE tweet_text;

#Verificando a quantidade de registros
SELECT count(*) from tweet_text;

#Verificando os 2 primeiros registros
SELECT * from tweet_text limit 2;

#Verificando as 10 hashtags mais utilizadas
SELECT 
  hashtag, count(1) as hashtag_count from tweet_text t
LATERAL VIEW 
  explode(split(regexp_replace(trim(upper(t.text)),"[^#A-Za-z0-9]"," "), ' ')) v1 as hashtag WHERE hashtag rlike "^#[a-zA-Z0-9]+$"
GROUP BY 
  hashtag ORDER BY hashtag_count desc 
LIMIT 10;

#Verificando as 10 mensagens mais compartilhadas
ALTER TABLE tweet_text CHANGE retweet_count retweet_count int;
DESCRIBE tweet_text;

SELECT 
  text, retweet_count from tweet_text
ORDER BY 
  retweet_count DESC 
LIMIT 10;

#Os tweets postados possuem sentimento negativo ou positivo?
#Carregando o dicionario
create table dictionary(word string,score int) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t’;
load data local inpath '/home/cloudera/Documents/dictionary.txt' into table dictionary;

#Visualizando os 10 primeiros registros
select * from dictionary limit 10;

#Visualizando os valores mínimo e máximo do score do dicionário
select max(score), min(score) from dictionary;

#Atribuindo um score para cada palavra encontrada nos tweets
create table tweet_words as
  select 
    t.screen_name, t.id, t.text, t.created_at, v1.word 
  from 
    tweet_text t
  LATERAL VIEW 
    explode(split(regexp_replace(lower(t.text),"[^#A-Za-z0-9]"," "), ' ')) v1 as word;
  
#Identificando quais das palavras existem no dicionário
create table tweet_join as
  select 
    tweet_words.screen_name, tweet_words.id, tweet_words.created_at, tweet_words.text, tweet_words.word,dictionary.score
  from 
    tweet_words
  LEFT OUTER JOIN 
    dictionary
  ON
    (tweet_words.word=dictionary.word);

#Criando uma tabela com a soma dos scores de cada tweet
create table tweet_score as
  select 
    t.screen_name, t.id, t.created_at, t.text, SUM(t.score) as tweet_score
  from 
    tweet_join t
  GROUP BY t.screen_name, t.id, t.created_at, t.text;

#Visualizando os 10 primeiros registros da tabela tweet_score
select text, tweet_score from tweet_score limit 10;

#Alterando o formato do resultado do score
ALTER TABLE tweet_score add columns (sentiment string);

INSERT OVERWRITE TABLE tweet_score
  SELECT 
    screen_name,id,created_at,text,tweet_score,
  case
    when tweet_score>=0 then'POSITIVO'
    when tweet_score<0 then'NEGATIVO'
  end as sentiment
  from 
    tweet_score;
    
#Criando uma nova tabela com os dados sobre as datas dos tweets
create table tweet_date as
  select 
    *, substr(created_at,9,2) as dd, substr(created_at,length(created_at)-3,4) as yyyy,
  case 
    when substr(created_at,5,3) = 'Jan' then '01'
    when substr(created_at,5,3) = 'Feb' then '02'
    when substr(created_at,5,3) = 'Mar' then '03'
    when substr(created_at,5,3) = 'Apr' then '04'
    when substr(created_at,5,3) = 'May' then '05'
    when substr(created_at,5,3) = 'Jun' then '06'
    when substr(created_at,5,3) = 'Jul' then '07'
    when substr(created_at,5,3) = 'Aug' then '08'
    when substr(created_at,5,3) = 'Sep' then '09'
    when substr(created_at,5,3) = 'Oct' then '10'
    when substr(created_at,5,3) = 'Nov' then '11'
    when substr(created_at,5,3) = 'Dec' then '12'
  end as mm
  from 
    tweet_score;

#Visualizando o schema da tabela
alter table tweet_date add columns (date string);
describe tweet_date;

#Carregando os dados para a tabela tweet_date
INSERT OVERWRITE TABLE tweet_date
  SELECT 
    screen_name, id, created_at, text, tweet_score, sentiment, dd, yyyy, mm, concat(yyyy,'-',mm,'-',dd) as date 
  FROM
    tweet_date;

#Visualizando os 5 primeiros registros
select * from tweet_date limit 5;

#Visualizando a quantidade de registros
select count(*) from tweet_date;

#Qual o sentimento dos 5 primeiros tweets com maior score?
select screen_name,id,text,tweet_score,sentiment from tweet_date order by tweet_score desc limit 5;

#Quais os tweets considerados negativos? (cite 5)
select 
  screen_name,id,text,tweet_score,sentiment 
from 
  tweet_date 
where sentiment = 'NEGATIVO' 
order by 
  tweet_score desc 
limit 5;
